@page "/measurements/measurement/{MeasurementId}"
@using ClinicalEpilepsyApp.Domain.DBModels
@rendermode InteractiveServer

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Measurement : @MeasurementId</h3>

<h4>Start time for measurement : @StartTime</h4>

@if (measurement == null)
{
    <p>Loading...</p>
}
else
{
    <div Class="rz-p-0 rz-p-md-12" style="width: 100%; overflow: auto">
        <RadzenChart style="width: auto">
            <RadzenColumnSeries Data="@EcgChannel1" CategoryProperty="Time" ValueProperty="Voltage" />
            <RadzenColumnSeries Data="@EcgChannel2" CategoryProperty="Time" ValueProperty="Voltage" />
            <RadzenColumnSeries Data="@EcgChannel3" CategoryProperty="Time" ValueProperty="Voltage" />
        </RadzenChart>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-sm-12 my-5">
                <RadzenCard class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem">
                    <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                    <RadzenLabel Text="Smooth" Component="smooth" Style="margin-right: 1rem;" />
                    <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                    <RadzenLabel Text="Show Data Labels" Component="dataLabels" Style="margin-right: 1rem;" />
                    <RadzenCheckBox @bind-Value="@showMarkers" Name="markers"></RadzenCheckBox>
                    <RadzenLabel Text="Show Markers" Component="markers" />
                </RadzenCard>
                <RadzenChart>
                    <RadzenLineSeries Smooth="@smooth" Data="@EcgChannel1" CategoryProperty="Time" Title="Channel 1" LineType="LineType.Dashed" ValueProperty="Voltage">
                        <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Square" />
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenLineSeries>
                    <RadzenLineSeries Smooth="@smooth" Data="@EcgChannel2" CategoryProperty="Time" Title="Channel 2" ValueProperty="Voltage">
                        <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenLineSeries>
                    <RadzenLineSeries Smooth="@smooth" Data="@EcgChannel3" CategoryProperty="Time" Title="Channel 2" ValueProperty="Voltage">
                        <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Padding="20" />
                    @* <RadzenValueAxis Formatter="@FormatAsUSD">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Revenue in USD" />
                    </RadzenValueAxis> *@
                </RadzenChart>
            </div>
        </div>
    </div>

}

@code {
    [Parameter]
    public string MeasurementId { get; set; }

    private EcgProcessedMeasurement measurement;
    public List<String> dateTimes { get; set; }
    public DateTime StartTime { get; set; }
    private EcgMeasurement[] EcgChannel1 { get; set; }
    private EcgMeasurement[] EcgChannel2 { get; set; }
    private EcgMeasurement[] EcgChannel3 { get; set; }

    class EcgMeasurement
    {
        public String Time { get; set; }
        public double Voltage { get; set; }
    }

    bool smooth = false;
    bool showDataLabels = false;
    bool showMarkers = true;

    protected override async Task OnInitializedAsync()
    {
        measurement = await GetMeasurementDetails(MeasurementId);
        StartTime = measurement.StartTime;

        EcgChannel1 = new EcgMeasurement[measurement.ProcessedEcgChannel1.Count];
        EcgChannel2 = new EcgMeasurement[measurement.ProcessedEcgChannel2.Count];
        EcgChannel3 = new EcgMeasurement[measurement.ProcessedEcgChannel3.Count];

        // Prepared for variations in sample rate
        GenerateTimeStamps(252);
    }

    private async Task<EcgProcessedMeasurement> GetMeasurementDetails(string measurementId)
    {
        return await HttpClient.GetFromJsonAsync<EcgProcessedMeasurement>($"https://localhost:7128/measurements/{measurementId}");
    }

    public List<String> GenerateTimeStamps(int sampleRate)
    {
        List<String> timestamps = new List<String>();
        // Calculate the time interval between each sample
        double timeInterval = 1.0 / sampleRate;

        // Generate timestamps for each sample based on the start time and time interval
        for (int i = 0; i < measurement.ProcessedEcgChannel1.Count; i++)
        {
            double seconds = i * timeInterval;
            timestamps.Add(StartTime.AddSeconds(seconds).ToString("hh:mm:ss.fff"));
            EcgChannel1[i] = new EcgMeasurement { Time = timestamps[i], Voltage = measurement.ProcessedEcgChannel1[i] };
            EcgChannel2[i] = new EcgMeasurement { Time = timestamps[i], Voltage = measurement.ProcessedEcgChannel2[i] };
            EcgChannel3[i] = new EcgMeasurement { Time = timestamps[i], Voltage = measurement.ProcessedEcgChannel3[i] };
        }
        dateTimes = timestamps;
        return timestamps;
    }
}

@page "/patients/{patientId}"
@using ClinicalEpilepsyApp.Domain.DBModels
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h1>Patient Details</h1>

@if (patient == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <div class="form-group">
            <label for="nameInput">Name:</label>
            <span id="nameInput">@patient.Name</span>
        </div>
        <div class="form-group">
            <label for="csiInput">CSI:</label>
            <span id="csiInput">@patient.CSIThreshold</span>
        </div>
        <div class="form-group">
            <label for="csiInput">MOD-CSI:</label>
            <span id="csiInput">@patient.ModCSIThreshold</span>
        </div>
        <div class="form-group">
            <label for="idInput">ID:</label>
            <span id="idInput">@patient.Id</span>
        </div>
        <div class="form-group">
            <label for="passwordInput">Password:</label>
            <span id="passwordInput">@patient.Password</span>
        </div>
        <div>
            <button class="btn btn-danger" @onclick="DeletePatient">Delete</button>
        </div>
        
    </div>
}

@code {
    [Parameter]
    public string PatientId { get; set; }

    private Patient patient;

    protected override async Task OnInitializedAsync()
    {
        patient = await GetPatientDetails(PatientId);
    }

    private async Task DeletePatient()
    {
        var response = await HttpClient.DeleteAsync($"https://localhost:7128/patients/{PatientId}");
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/patients");
        }
        else
        {
            Console.WriteLine("Failed");
        }
    }

    private async Task<Patient> GetPatientDetails(string patientId)
    {
        return await HttpClient.GetFromJsonAsync<Patient>($"https://localhost:7128/patients/{patientId}");
    }
}
